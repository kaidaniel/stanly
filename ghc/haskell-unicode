#!/usr/bin/env python
from pathlib import Path
from re import subn
from argparse import ArgumentParser
parser = ArgumentParser("haskell-unicode")
parser.add_argument("files", nargs="+", type=Path)
parser.add_argument("--to-ascii", action="store_true")
args = parser.parse_args()

# ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉ ₀
# ⫶ ⫷ ⫸ ⫹ ⫺ ⫻ ⫼ ⫽ ⫾ ⫿ ⫶ ⇉ ⇝ ⇢ ⇾ ↣ ⇶ ⫶ ⇇
# ₘ ₐ ₑ ₒ ₓ ₔ ₕ ₖ ₗ ₘ ₙ ₚ ₛ ₜ

for path in args.files:

    contents = path.read_text(encoding="utf8")
    if "-- no-haskell-unicode" in contents:
        continue
    counts = {}

    for old, new in (
        ("mempty", "ε₁"),
        ("mzero", "εₘ"),
        ("empty", "εₐ"),
        ("mconcat", "κ₁"),
        ("concat", "κₗ"),
        ("concatMap", "κλ"),
        ("`elem`", "∈"),
        ("\.", "∘"),
        ("\$", "⎴"),
        ("\<\|\>!", "⫶"),
        (">>>", "⋙"),
        (">>", "≫"),
        ("\<\>!", "⋄"),
        (">>=\!", "⇉"),
        ("=<<", "⇇"),
        ("\<\*\>\!", "⊛"),
        ("fst", "π₁"),
        ("snd", "π₂"),
        ("\|-\|", "⊹"),
        ("pure_", "ω"),
        ("fmap_", "φ")
    ):
        if args.to_ascii:
            new, old = old.replace("\\", ""), new
        contents, n = subn(
            rf"([@\n ,\(]){old}([\n ,\)][^=∷])", 
            rf"\1{new}\2", 
            contents
        )
        if n != 0:
            counts[old] = n
        for prime, subscript in ("3'", "₃"), ("2'", "₂"), ("1'", "₁"):
            contents, n = subn(
                rf"([^'][a-zA-Z]+){prime}",
                rf"\1{subscript}",
                contents
            )
            if n != 0:
                counts[old] = counts.get(old, 0) + n

    print(f"{path}: {sum(counts.values())} replacements {counts}")
    path.write_text(contents, encoding="utf8")
