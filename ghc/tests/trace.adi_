// RUN: stanly --trace --no-colour < %s | FileCheck %s 

let f = fn x.(x + 1);
let g = ((((1 + 2) + 3) + (4 + (5 + (6 + 7))))) in

// CHECK: 1
// CHECK: app ((λf.((λg.1) (((1 + 2) + 3) + (4 + (5 + (6 + 7)))))) (λx.(x + 1)))
// CHECK: envr Γ⟦⟧
// CHECK: 2
// CHECK: lam  (λf.((λg.1) (((1 + 2) + 3) + (4 + (5 + (6 + 7))))))
// CHECK: envr Γ⟦⟧
// CHECK: 3
// CHECK: lam  (λx.(x + 1))
// CHECK: envr Γ⟦⟧
// CHECK: 4
// CHECK: app ((λg.1) (((1 + 2) + 3) + (4 + (5 + (6 + 7)))))
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 5
// CHECK: lam  (λg.1)
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 6
// CHECK: op2+ (((1 + 2) + 3) + (4 + (5 + (6 + 7))))
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 7
// CHECK: op2+ ((1 + 2) + 3)
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 8
// CHECK: op2+ (1 + 2)
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 9
// CHECK: num  1
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 10
// CHECK: num  2
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 11
// CHECK: num  3
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 12
// CHECK: op2+ (4 + (5 + (6 + 7)))
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 13
// CHECK: num  4
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 14
// CHECK: op2+ (5 + (6 + 7))
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 15
// CHECK: num  5
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 16
// CHECK: op2+ (6 + 7)
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 17
// CHECK: num  6
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 18
// CHECK: num  7
// CHECK: envr Γ⟦f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: 19
// CHECK: num  1
// CHECK: envr Γ⟦g: 1, f: 0⟧
// CHECK: stor 0   lam λx.(x + 1) Γ⟦⟧
// CHECK: stor 1   num 28


let a = ((3 + 4) * 9);

let b = ((fn x.((x + 4) * 9)) 3);

let c = ((1 / 0) + 5);

(f x)


