cmake_minimum_required(VERSION 3.20)
set(binary_dir ${CMAKE_SOURCE_DIR}/build)
set(build_types Debug Release)
set(presets clang gcc)

function(main)
    parse_args_and_setup_or_fatal_error()
    foreach(preset build_typ IN ZIP_LISTS presets build_types)
        execute_workflow(${build_typ} ${preset})
    endforeach()
    make_dependency_graph_png()
    run_clang_tidy_on_all_source_files()
    message("\n------------Successfully built presets [${presets}] for build types [${build_types}]--------")
endfunction()

function(execute_workflow build_typ preset)
    set(clang_tidy clang-tidy --quiet)
    set(ENV{KSAR_BUILD_DIR} ${build_typ}) # used in CMakePresets.json:configurePresets:base
    set(ENV{CMAKE_BUILD_TYPE} $ENV{KSAR_BUILD_DIR})
    if(NOT EXISTS ${binary_dir}/${preset}/$ENV{KSAR_BUILD_DIR})
        msg(configure)
        set(x clang-tidy)
        execute_cmd(${CMAKE_COMMAND} --preset ${preset})
    endif()
    msg(build)
    execute_cmd(${CMAKE_COMMAND} --build --preset ${preset})
    unset(ENV{KSAR_BUILD_DIR})
    unset(ENV{CMAKE_BUILD_TYPE})
endfunction()

function(execute_cmd)
    execute_process(COMMAND ${ARGN} ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE COMMAND_ERROR_IS_FATAL ANY)
endfunction()

function(msg step)
    message("\n-------------------[build/${preset}/${build_typ}:${step}]----------------------")
endfunction()

macro(make_fns_using_build_dir)
    list(GET presets 0 first_preset)
    list(GET build_types 0 first_build_type)
    set(build_dir ${binary_dir}/${first_preset}/${first_build_type}/)
    set(dependency_graph ${binary_dir}/dependency_graph)

    function(make_dependency_graph_png)
        if(NOT EXISTS ${dependency_graph}.png)
            message("\n-------------------[build/dependency_graph.png]----------------------")
            execute_cmd(${CMAKE_COMMAND} -S ${CMAKE_SOURCE_DIR} -B ${build_dir} --graphviz=${dependency_graph}.dot)
            execute_cmd(dot -Tpng ${dependency_graph}.dot -o ${dependency_graph}.png)
            file(GLOB graph_files ${dependency_graph}.dot.*)
            foreach(graph_file ${graph_files})
                file(REMOVE ${graph_file})
            endforeach()
        endif()
    endfunction()

    function(run_clang_tidy_on_all_source_files)
        message("\n-------------------[clang-tidy]----------------------")
        file(GLOB source_files src/*.cpp src/include/*.h)
        execute_cmd(clang-tidy --warnings-as-errors -p ${build_dir} ${source_files})
    endfunction()
endmacro()

function(parse_args_and_setup_or_fatal_error)
    set(help "usage: 'cmake -P test_repo.cmake [--help-script][--remove]'")
    set(first_arg ${CMAKE_ARGV3})
    if(first_arg STREQUAL --help-script)
        message(FATAL_ERROR ${help})
    endif()
    set(remove ${first_arg})
    set(_remove_vals --remove -r)
    if(CMAKE_ARGC GREATER 4 OR (CMAKE_ARGC EQUAL 4 AND NOT remove IN_LIST _remove_vals))
        message(FATAL_ERROR "unrecognized arguments. ${help} ${remove}")
    endif()
    if(NOT (EXISTS ${CMAKE_SOURCE_DIR}/CMakeLists.txt AND EXISTS ${CMAKE_SOURCE_DIR}/CMakePresets.json))
        message(FATAL_ERROR "only run from the project root")
    endif()
    if(remove)
        file(REMOVE_RECURSE ${binary_dir})
    endif()
endfunction()

make_fns_using_build_dir()
main()