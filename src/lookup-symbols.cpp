#include <iostream>
#include <map>
#include <set>
#include <string>

#include "tree_sitter/api.h"

extern "C" {
TSLanguage*
tree_sitter_python(void);
}
const auto* const py = tree_sitter_python();

// set of c++ keywords generated by chatgpt
const std::set<std::string> cpp_keywords = {"alignas", "alignof", "and", "and_eq", "asm", "auto",
    "bitand", "bitor", "bool", "break", "case", "catch", "char", "char16_t", "char32_t", "class",
    "compl", "const", "constexpr", "const_cast", "continue", "decltype", "default", "delete", "do",
    "double", "dynamic_cast", "else", "enum", "explicit", "export", "extern", "false", "float",
    "for", "friend", "goto", "if", "inline", "int", "long", "mutable", "namespace", "new",
    "noexcept", "not", "not_eq", "nullptr", "operator", "or", "or_eq", "private", "protected",
    "public", "register", "reinterpret_cast", "return", "short", "signed", "sizeof", "static",
    "static_assert", "static_cast", "struct", "switch", "template", "this", "thread_local", "throw",
    "true", "try", "typedef", "typeid", "typename", "union", "unsigned", "using", "virtual", "void",
    "volatile", "wchar_t", "while", "xor", "xor_eq"};

int
main() {
  std::map<int, std::string> names;
  std::string line;
  while (std::getline(std::cin, line)) {
    auto sym = ts_language_symbol_for_name(py, line.data(), line.length(), true);
    names[sym] = std::move(line);
  }
  for (const auto& [sym, name] : names) {
    if (name.empty() || (sym == 0U)) { continue; }
    std::cout << (cpp_keywords.contains(name) ? "s_" + name : name) << " = " << sym << ",\n";
  }
}