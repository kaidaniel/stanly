#include "parser.hpp"

#include <utility>

#include "cursor.hpp"
#include "parse_symbols.hpp"

// generated by "./generate_parser_skeleton.sh build-default/tree-sitter-python/src/node-types.json
// "

namespace stanly::parser {

void
parse_descendants(cursor& c, auto&& f_child, auto&& f_field) {
  if (goto_child(c)) {
    do {
      parser_trampoline(c);
      auto field = current_field(c);
      auto handle = current_handle(c);
      if (field) {
        f_field(*field, handle);
      } else {
        f_child(current_symbol(c), handle);
      }
    } while (goto_sibling(c));
    goto_parent(c);
  }
}

void
parser_trampoline(cursor& c) {
  using enum symbol;
  using enum field;
  switch (current_symbol(c)) {
    case sym_aliased_import: {
      handle field_alias;
      handle field_name;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_alias: field_alias = h; break;
              case fld_name: field_name = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_aliased_import(c, field_alias, field_name);
      return;
    }
    case sym_argument_list: {
      std::optional<handle> child_dictionary_splat = std::nullopt;
      std::optional<handle> child_expression = std::nullopt;
      std::optional<handle> child_keyword_argument = std::nullopt;
      std::optional<handle> child_list_splat = std::nullopt;
      std::optional<handle> child_parenthesized_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_dictionary_splat: child_dictionary_splat = h; break;
              case sym_keyword_argument: child_keyword_argument = h; break;
              case sym_list_splat: child_list_splat = h; break;
              case sym_parenthesized_expression: child_parenthesized_expression = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_argument_list(c, child_dictionary_splat, child_expression, child_keyword_argument,
                              child_list_splat, child_parenthesized_expression);
      return;
    }
    case sym_as_pattern: {
      std::optional<handle> child_expression = std::nullopt;

      handle field_alias;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_alias: field_alias = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_as_pattern(c, child_expression, field_alias);
      return;
    }
    case sym_assert_statement: {
      std::optional<handle> child_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_assert_statement(c, child_expression);
      return;
    }
    case sym_assignment: {
      std::optional<handle> field_right = std::nullopt;
      std::optional<handle> field_type = std::nullopt;
      handle field_left;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_left: field_left = h; break;
              case fld_right: field_right = h; break;
              case fld_type: field_type = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_assignment(c, field_right, field_type, field_left);
      return;
    }
    case sym_attribute: {
      handle field_attribute;
      handle field_object;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_attribute: field_attribute = h; break;
              case fld_object: field_object = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_attribute(c, field_attribute, field_object);
      return;
    }
    case sym_augmented_assignment: {
      handle field_left;
      handle field_operator;
      handle field_right;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_left: field_left = h; break;
              case fld_operator: field_operator = h; break;
              case fld_right: field_right = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_augmented_assignment(c, field_left, field_operator, field_right);
      return;
    }
    case sym_await: {
      std::optional<handle> child_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_await(c, child_expression);
      return;
    }
    case sym_binary_operator: {
      handle field_left;
      handle field_operator;
      handle field_right;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_left: field_left = h; break;
              case fld_operator: field_operator = h; break;
              case fld_right: field_right = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_binary_operator(c, field_left, field_operator, field_right);
      return;
    }
    case sym_block: {
      std::optional<handle> child__compound_statement = std::nullopt;
      std::optional<handle> child__simple_statement = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_block(c, child__compound_statement, child__simple_statement);
      return;
    }
    case sym_boolean_operator: {
      handle field_left;
      handle field_operator;
      handle field_right;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_left: field_left = h; break;
              case fld_operator: field_operator = h; break;
              case fld_right: field_right = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_boolean_operator(c, field_left, field_operator, field_right);
      return;
    }
    case sym_break_statement: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_break_statement(c);
      return;
    }
    case sym_call: {
      handle field_arguments;
      handle field_function;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_arguments: field_arguments = h; break;
              case fld_function: field_function = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_call(c, field_arguments, field_function);
      return;
    }
    case sym_case_clause: {
      std::optional<handle> field_guard = std::nullopt;
      handle field_consequence;
      handle field_pattern;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_consequence: field_consequence = h; break;
              case fld_guard: field_guard = h; break;
              case fld_pattern: field_pattern = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_case_clause(c, field_guard, field_consequence, field_pattern);
      return;
    }
    case sym_case_pattern: {
      std::optional<handle> child_attribute = std::nullopt;
      std::optional<handle> child_identifier = std::nullopt;
      std::optional<handle> child_subscript = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_attribute: child_attribute = h; break;
              case sym_identifier: child_identifier = h; break;
              case sym_subscript: child_subscript = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_case_pattern(c, child_attribute, child_identifier, child_subscript);
      return;
    }
    case sym_chevron: {
      std::optional<handle> child_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_chevron(c, child_expression);
      return;
    }
    case sym_class_definition: {
      std::optional<handle> field_superclasses = std::nullopt;
      handle field_body;
      handle field_name;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_body: field_body = h; break;
              case fld_name: field_name = h; break;
              case fld_superclasses: field_superclasses = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_class_definition(c, field_superclasses, field_body, field_name);
      return;
    }
    case sym_comparison_operator: {
      std::optional<handle> child_primary_expression = std::nullopt;

      handle field_operators;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_operators: field_operators = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_comparison_operator(c, child_primary_expression, field_operators);
      return;
    }
    case sym_concatenated_string: {
      std::optional<handle> child_string = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_string: child_string = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_concatenated_string(c, child_string);
      return;
    }
    case sym_conditional_expression: {
      std::optional<handle> child_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_conditional_expression(c, child_expression);
      return;
    }
    case sym_continue_statement: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_continue_statement(c);
      return;
    }
    case sym_decorated_definition: {
      std::optional<handle> child_decorator = std::nullopt;

      handle field_definition;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_decorator: child_decorator = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_definition: field_definition = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_decorated_definition(c, child_decorator, field_definition);
      return;
    }
    case sym_decorator: {
      std::optional<handle> child_primary_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_decorator(c, child_primary_expression);
      return;
    }
    case sym_default_parameter: {
      handle field_name;
      handle field_value;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_name: field_name = h; break;
              case fld_value: field_value = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_default_parameter(c, field_name, field_value);
      return;
    }
    case sym_delete_statement: {
      std::optional<handle> child_expression = std::nullopt;
      std::optional<handle> child_expression_list = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_expression_list: child_expression_list = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_delete_statement(c, child_expression, child_expression_list);
      return;
    }
    case sym_dictionary: {
      std::optional<handle> child_dictionary_splat = std::nullopt;
      std::optional<handle> child_pair = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_dictionary_splat: child_dictionary_splat = h; break;
              case sym_pair: child_pair = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_dictionary(c, child_dictionary_splat, child_pair);
      return;
    }
    case sym_dictionary_comprehension: {
      std::optional<handle> child_for_in_clause = std::nullopt;
      std::optional<handle> child_if_clause = std::nullopt;

      handle field_body;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_for_in_clause: child_for_in_clause = h; break;
              case sym_if_clause: child_if_clause = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_body: field_body = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_dictionary_comprehension(c, child_for_in_clause, child_if_clause, field_body);
      return;
    }
    case sym_dictionary_splat: {
      std::optional<handle> child_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_dictionary_splat(c, child_expression);
      return;
    }
    case sym_dictionary_splat_pattern: {
      std::optional<handle> child_attribute = std::nullopt;
      std::optional<handle> child_identifier = std::nullopt;
      std::optional<handle> child_subscript = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_attribute: child_attribute = h; break;
              case sym_identifier: child_identifier = h; break;
              case sym_subscript: child_subscript = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_dictionary_splat_pattern(c, child_attribute, child_identifier, child_subscript);
      return;
    }
    case sym_dotted_name: {
      std::optional<handle> child_identifier = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_identifier: child_identifier = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_dotted_name(c, child_identifier);
      return;
    }
    case sym_elif_clause: {
      handle field_condition;
      handle field_consequence;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_condition: field_condition = h; break;
              case fld_consequence: field_consequence = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_elif_clause(c, field_condition, field_consequence);
      return;
    }
    case sym_else_clause: {
      handle field_body;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_body: field_body = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_else_clause(c, field_body);
      return;
    }
    case sym_except_clause: {
      std::optional<handle> child_block = std::nullopt;
      std::optional<handle> child_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_block: child_block = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_except_clause(c, child_block, child_expression);
      return;
    }
    case sym_exec_statement: {
      std::optional<handle> child_expression = std::nullopt;

      handle field_code;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_code: field_code = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_exec_statement(c, child_expression, field_code);
      return;
    }
    case sym_expression_list: {
      std::optional<handle> child_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_expression_list(c, child_expression);
      return;
    }
    case sym_expression_statement: {
      std::optional<handle> child_assignment = std::nullopt;
      std::optional<handle> child_augmented_assignment = std::nullopt;
      std::optional<handle> child_expression = std::nullopt;
      std::optional<handle> child_yield = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_assignment: child_assignment = h; break;
              case sym_augmented_assignment: child_augmented_assignment = h; break;
              case sym_yield: child_yield = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_expression_statement(c, child_assignment, child_augmented_assignment,
                                     child_expression, child_yield);
      return;
    }
    case sym_finally_clause: {
      std::optional<handle> child_block = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_block: child_block = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_finally_clause(c, child_block);
      return;
    }
    case sym_for_in_clause: {
      handle field_left;
      handle field_right;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_left: field_left = h; break;
              case fld_right: field_right = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_for_in_clause(c, field_left, field_right);
      return;
    }
    case sym_for_statement: {
      std::optional<handle> field_alternative = std::nullopt;
      handle field_body;
      handle field_left;
      handle field_right;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_alternative: field_alternative = h; break;
              case fld_body: field_body = h; break;
              case fld_left: field_left = h; break;
              case fld_right: field_right = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_for_statement(c, field_alternative, field_body, field_left, field_right);
      return;
    }
    case sym_format_expression: {
      std::optional<handle> child_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_format_expression(c, child_expression);
      return;
    }
    case sym_format_specifier: {
      std::optional<handle> child_format_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_format_expression: child_format_expression = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_format_specifier(c, child_format_expression);
      return;
    }
    case sym_function_definition: {
      std::optional<handle> field_return_type = std::nullopt;
      handle field_body;
      handle field_name;
      handle field_parameters;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_body: field_body = h; break;
              case fld_name: field_name = h; break;
              case fld_parameters: field_parameters = h; break;
              case fld_return_type: field_return_type = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_function_definition(c, field_return_type, field_body, field_name, field_parameters);
      return;
    }
    case sym_future_import_statement: {
      handle field_name;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_name: field_name = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_future_import_statement(c, field_name);
      return;
    }
    case sym_generator_expression: {
      std::optional<handle> child_for_in_clause = std::nullopt;
      std::optional<handle> child_if_clause = std::nullopt;

      handle field_body;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_for_in_clause: child_for_in_clause = h; break;
              case sym_if_clause: child_if_clause = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_body: field_body = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_generator_expression(c, child_for_in_clause, child_if_clause, field_body);
      return;
    }
    case sym_global_statement: {
      std::optional<handle> child_identifier = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_identifier: child_identifier = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_global_statement(c, child_identifier);
      return;
    }
    case sym_if_clause: {
      std::optional<handle> child_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_if_clause(c, child_expression);
      return;
    }
    case sym_if_statement: {
      std::optional<handle> field_alternative = std::nullopt;
      handle field_condition;
      handle field_consequence;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_alternative: field_alternative = h; break;
              case fld_condition: field_condition = h; break;
              case fld_consequence: field_consequence = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_if_statement(c, field_alternative, field_condition, field_consequence);
      return;
    }
    case sym_import_from_statement: {
      std::optional<handle> child_wildcard_import = std::nullopt;
      std::optional<handle> field_name = std::nullopt;
      handle field_module_name;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_wildcard_import: child_wildcard_import = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_module_name: field_module_name = h; break;
              case fld_name: field_name = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_import_from_statement(c, child_wildcard_import, field_name, field_module_name);
      return;
    }
    case sym_import_prefix: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_import_prefix(c);
      return;
    }
    case sym_import_statement: {
      handle field_name;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_name: field_name = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_import_statement(c, field_name);
      return;
    }
    case sym_interpolation: {
      std::optional<handle> child_expression = std::nullopt;
      std::optional<handle> child_format_specifier = std::nullopt;
      std::optional<handle> child_type_conversion = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_format_specifier: child_format_specifier = h; break;
              case sym_type_conversion: child_type_conversion = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_interpolation(c, child_expression, child_format_specifier, child_type_conversion);
      return;
    }
    case sym_keyword_argument: {
      handle field_name;
      handle field_value;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_name: field_name = h; break;
              case fld_value: field_value = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_keyword_argument(c, field_name, field_value);
      return;
    }
    case sym_keyword_separator: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_keyword_separator(c);
      return;
    }
    case sym_lambda: {
      std::optional<handle> field_parameters = std::nullopt;
      handle field_body;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_body: field_body = h; break;
              case fld_parameters: field_parameters = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_lambda(c, field_parameters, field_body);
      return;
    }
    case sym_lambda_parameters: {
      std::optional<handle> child_parameter = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_lambda_parameters(c, child_parameter);
      return;
    }
    case sym_list: {
      std::optional<handle> child_expression = std::nullopt;
      std::optional<handle> child_list_splat = std::nullopt;
      std::optional<handle> child_parenthesized_list_splat = std::nullopt;
      std::optional<handle> child_yield = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_list_splat: child_list_splat = h; break;
              case sym_parenthesized_list_splat: child_parenthesized_list_splat = h; break;
              case sym_yield: child_yield = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_list(c, child_expression, child_list_splat, child_parenthesized_list_splat,
                     child_yield);
      return;
    }
    case sym_list_comprehension: {
      std::optional<handle> child_for_in_clause = std::nullopt;
      std::optional<handle> child_if_clause = std::nullopt;

      handle field_body;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_for_in_clause: child_for_in_clause = h; break;
              case sym_if_clause: child_if_clause = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_body: field_body = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_list_comprehension(c, child_for_in_clause, child_if_clause, field_body);
      return;
    }
    case sym_list_pattern: {
      std::optional<handle> child_pattern = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_list_pattern(c, child_pattern);
      return;
    }
    case sym_list_splat: {
      std::optional<handle> child_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_list_splat(c, child_expression);
      return;
    }
    case sym_list_splat_pattern: {
      std::optional<handle> child_attribute = std::nullopt;
      std::optional<handle> child_identifier = std::nullopt;
      std::optional<handle> child_subscript = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_attribute: child_attribute = h; break;
              case sym_identifier: child_identifier = h; break;
              case sym_subscript: child_subscript = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_list_splat_pattern(c, child_attribute, child_identifier, child_subscript);
      return;
    }
    case sym_match_statement: {
      std::optional<handle> field_alternative = std::nullopt;
      handle field_subject;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_alternative: field_alternative = h; break;
              case fld_subject: field_subject = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_match_statement(c, field_alternative, field_subject);
      return;
    }
    case sym_module: {
      std::optional<handle> child__compound_statement = std::nullopt;
      std::optional<handle> child__simple_statement = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_module(c, child__compound_statement, child__simple_statement);
      return;
    }
    case sym_named_expression: {
      handle field_name;
      handle field_value;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_name: field_name = h; break;
              case fld_value: field_value = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_named_expression(c, field_name, field_value);
      return;
    }
    case sym_nonlocal_statement: {
      std::optional<handle> child_identifier = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_identifier: child_identifier = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_nonlocal_statement(c, child_identifier);
      return;
    }
    case sym_not_operator: {
      handle field_argument;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_argument: field_argument = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_not_operator(c, field_argument);
      return;
    }
    case sym_pair: {
      handle field_key;
      handle field_value;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_key: field_key = h; break;
              case fld_value: field_value = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_pair(c, field_key, field_value);
      return;
    }
    case sym_parameters: {
      std::optional<handle> child_parameter = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_parameters(c, child_parameter);
      return;
    }
    case sym_parenthesized_expression: {
      std::optional<handle> child_expression = std::nullopt;
      std::optional<handle> child_list_splat = std::nullopt;
      std::optional<handle> child_parenthesized_expression = std::nullopt;
      std::optional<handle> child_yield = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_list_splat: child_list_splat = h; break;
              case sym_parenthesized_expression: child_parenthesized_expression = h; break;
              case sym_yield: child_yield = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_parenthesized_expression(c, child_expression, child_list_splat,
                                         child_parenthesized_expression, child_yield);
      return;
    }
    case sym_parenthesized_list_splat: {
      std::optional<handle> child_list_splat = std::nullopt;
      std::optional<handle> child_parenthesized_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_list_splat: child_list_splat = h; break;
              case sym_parenthesized_expression: child_parenthesized_expression = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_parenthesized_list_splat(c, child_list_splat, child_parenthesized_expression);
      return;
    }
    case sym_pass_statement: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_pass_statement(c);
      return;
    }
    case sym_pattern_list: {
      std::optional<handle> child_pattern = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_pattern_list(c, child_pattern);
      return;
    }
    case sym_positional_separator: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_positional_separator(c);
      return;
    }
    case sym_print_statement: {
      std::optional<handle> child_chevron = std::nullopt;
      std::optional<handle> field_argument = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_chevron: child_chevron = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_argument: field_argument = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_print_statement(c, child_chevron, field_argument);
      return;
    }
    case sym_raise_statement: {
      std::optional<handle> child_expression = std::nullopt;
      std::optional<handle> child_expression_list = std::nullopt;
      std::optional<handle> field_cause = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_expression_list: child_expression_list = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_cause: field_cause = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_raise_statement(c, child_expression, child_expression_list, field_cause);
      return;
    }
    case sym_relative_import: {
      std::optional<handle> child_dotted_name = std::nullopt;
      std::optional<handle> child_import_prefix = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_dotted_name: child_dotted_name = h; break;
              case sym_import_prefix: child_import_prefix = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_relative_import(c, child_dotted_name, child_import_prefix);
      return;
    }
    case sym_return_statement: {
      std::optional<handle> child_expression = std::nullopt;
      std::optional<handle> child_expression_list = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_expression_list: child_expression_list = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_return_statement(c, child_expression, child_expression_list);
      return;
    }
    case sym_set: {
      std::optional<handle> child_expression = std::nullopt;
      std::optional<handle> child_list_splat = std::nullopt;
      std::optional<handle> child_parenthesized_list_splat = std::nullopt;
      std::optional<handle> child_yield = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_list_splat: child_list_splat = h; break;
              case sym_parenthesized_list_splat: child_parenthesized_list_splat = h; break;
              case sym_yield: child_yield = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_set(c, child_expression, child_list_splat, child_parenthesized_list_splat,
                    child_yield);
      return;
    }
    case sym_set_comprehension: {
      std::optional<handle> child_for_in_clause = std::nullopt;
      std::optional<handle> child_if_clause = std::nullopt;

      handle field_body;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_for_in_clause: child_for_in_clause = h; break;
              case sym_if_clause: child_if_clause = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_body: field_body = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_set_comprehension(c, child_for_in_clause, child_if_clause, field_body);
      return;
    }
    case sym_slice: {
      std::optional<handle> child_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_slice(c, child_expression);
      return;
    }
    case sym_string: {
      std::optional<handle> child_escape_sequence = std::nullopt;
      std::optional<handle> child_interpolation = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_escape_sequence: child_escape_sequence = h; break;
              case sym_interpolation: child_interpolation = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_string(c, child_escape_sequence, child_interpolation);
      return;
    }
    case sym_subscript: {
      handle field_subscript;
      handle field_value;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_subscript: field_subscript = h; break;
              case fld_value: field_value = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_subscript(c, field_subscript, field_value);
      return;
    }
    case sym_try_statement: {
      std::optional<handle> child_else_clause = std::nullopt;
      std::optional<handle> child_except_clause = std::nullopt;
      std::optional<handle> child_finally_clause = std::nullopt;

      handle field_body;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_else_clause: child_else_clause = h; break;
              case sym_except_clause: child_except_clause = h; break;
              case sym_finally_clause: child_finally_clause = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_body: field_body = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_try_statement(c, child_else_clause, child_except_clause, child_finally_clause,
                              field_body);
      return;
    }
    case sym_tuple: {
      std::optional<handle> child_expression = std::nullopt;
      std::optional<handle> child_list_splat = std::nullopt;
      std::optional<handle> child_parenthesized_list_splat = std::nullopt;
      std::optional<handle> child_yield = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_list_splat: child_list_splat = h; break;
              case sym_parenthesized_list_splat: child_parenthesized_list_splat = h; break;
              case sym_yield: child_yield = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_tuple(c, child_expression, child_list_splat, child_parenthesized_list_splat,
                      child_yield);
      return;
    }
    case sym_tuple_pattern: {
      std::optional<handle> child_pattern = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_tuple_pattern(c, child_pattern);
      return;
    }
    case sym_type: {
      std::optional<handle> child_expression = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_type(c, child_expression);
      return;
    }
    case sym_typed_default_parameter: {
      handle field_name;
      handle field_type;
      handle field_value;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_name: field_name = h; break;
              case fld_type: field_type = h; break;
              case fld_value: field_value = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_typed_default_parameter(c, field_name, field_type, field_value);
      return;
    }
    case sym_typed_parameter: {
      std::optional<handle> child_dictionary_splat_pattern = std::nullopt;
      std::optional<handle> child_identifier = std::nullopt;
      std::optional<handle> child_list_splat_pattern = std::nullopt;

      handle field_type;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_dictionary_splat_pattern: child_dictionary_splat_pattern = h; break;
              case sym_identifier: child_identifier = h; break;
              case sym_list_splat_pattern: child_list_splat_pattern = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_type: field_type = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_typed_parameter(c, child_dictionary_splat_pattern, child_identifier,
                                child_list_splat_pattern, field_type);
      return;
    }
    case sym_unary_operator: {
      handle field_argument;
      handle field_operator;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_argument: field_argument = h; break;
              case fld_operator: field_operator = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_unary_operator(c, field_argument, field_operator);
      return;
    }
    case sym_while_statement: {
      std::optional<handle> field_alternative = std::nullopt;
      handle field_body;
      handle field_condition;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_alternative: field_alternative = h; break;
              case fld_body: field_body = h; break;
              case fld_condition: field_condition = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_while_statement(c, field_alternative, field_body, field_condition);
      return;
    }
    case sym_wildcard_import: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_wildcard_import(c);
      return;
    }
    case sym_with_clause: {
      std::optional<handle> child_with_item = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_with_item: child_with_item = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_with_clause(c, child_with_item);
      return;
    }
    case sym_with_item: {
      handle field_value;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_value: field_value = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_with_item(c, field_value);
      return;
    }
    case sym_with_statement: {
      std::optional<handle> child_with_clause = std::nullopt;

      handle field_body;
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_with_clause: child_with_clause = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              case fld_body: field_body = h; break;
              default: throw "unreachable";
            }
          });
      parse_sym_with_statement(c, child_with_clause, field_body);
      return;
    }
    case sym_yield: {
      std::optional<handle> child_expression = std::nullopt;
      std::optional<handle> child_expression_list = std::nullopt;

      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              case sym_expression_list: child_expression_list = h; break;
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_yield(c, child_expression, child_expression_list);
      return;
    }
    case sym_comment: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_comment(c);
      return;
    }
    case sym_ellipsis: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_ellipsis(c);
      return;
    }
    case sym_escape_sequence: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_escape_sequence(c);
      return;
    }
    case sym_false: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_false(c);
      return;
    }
    case sym_float: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_float(c);
      return;
    }
    case sym_identifier: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_identifier(c);
      return;
    }
    case sym_integer: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_integer(c);
      return;
    }
    case sym_none: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_none(c);
      return;
    }
    case sym_true: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_true(c);
      return;
    }
    case sym_type_conversion: {
      parse_descendants(
          c,
          [&](symbol s, handle h) {
            switch (s) {
              default: throw "unreachable";
            }
          },
          [&](field f, handle h) {
            switch (f) {
              default: throw "unreachable";
            }
          });
      parse_sym_type_conversion(c);
      return;
    }
  };
  throw "unreachable";
}

}  // namespace stanly::parser
