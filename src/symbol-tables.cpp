#include "symbol-tables.h"

#include <map>
#include <string>
#include <string_view>
#include <vector>

namespace stanly {
std::string
generate_tree_sitter_symbols() {
  std::string check = "// clang-format off\ninline void\ncheck_symbols() {\n";
  auto make_enum = [&](std::string_view name,
                       std::vector<std::string_view>&& items) -> std::string {
    std::map<TSSymbol, std::string_view> m{};
    std::string out = std::format("enum class {} {}\n", name, "{");
    for (const auto& s : items) { m[lookup_symbol(s)] = s; }
    for (const auto& [sym, nm] : m) {
      out += std::format("  {} = {},\n", nm, sym);
      check += std::format(
          "  stanly_assert(static_cast<TSSymbol>({0}::{1}) == lookup_symbol(\"{1}\"));\n", name,
          nm);
    }
    return out + "};\n";
  };
  return "// generated by stanly::generate_tree_sitter_symbols()\n" +
         make_enum(
             "simple_statement",
             {"assert_statement", "break_statement", "continue_statement", "delete_statement",
              "exec_statement", "expression_statement", "future_import_statement",
              "global_statement", "import_from_statement", "import_statement", "nonlocal_statement",
              "pass_statement", "print_statement", "raise_statement", "return_statement"}) +
         make_enum("compound_statement",
                   {"class_definition", "decorated_definition", "for_statement",
                    "function_definition", "if_statement", "match_statement", "try_statement",
                    "while_statement", "with_statement"}) +
         make_enum("symbs", {"assignment", "module", "identifier", "integer", "string",
                             "dictionary", "pair", "list", "set", "subscript"}) +
         check + "};\n// clang-format on";
}

TSSymbol
lookup_symbol(std::string_view name) {
  return ts_language_symbol_for_name(tree_sitter_python(), name.data(), name.length(), true);
}
TSFieldId
lookup_field(std::string_view name) {
  return ts_language_field_id_for_name(tree_sitter_python(), name.data(), name.size());
}

}  // namespace stanly