#pragma once

#include <string_view>
#include <utility>

// generated by "./generate-parser.sh build-default/tree-sitter-python/src/node-types.json "

namespace stanly {

enum class symbol;
enum class field;
struct cursor;

std::string_view current_text(cursor&);
symbol current_symbol(cursor&);
std::optional<field> current_field(cursor&);

bool goto_child(cursor&);
bool goto_sibling(cursor&);
void goto_parent(cursor&);

enum class symbol {
  sym_identifier = 1,
  sym_ellipsis = 83,
  sym_escape_sequence = 88,
  sym_type_conversion = 91,
  sym_integer = 92,
  sym_float = 93,
  sym_true = 95,
  sym_false = 96,
  sym_none = 97,
  sym_comment = 98,
  sym_module = 105,
  sym_import_statement = 108,
  sym_import_prefix = 109,
  sym_relative_import = 110,
  sym_future_import_statement = 111,
  sym_import_from_statement = 112,
  sym_aliased_import = 114,
  sym_wildcard_import = 115,
  sym_print_statement = 116,
  sym_chevron = 117,
  sym_assert_statement = 118,
  sym_expression_statement = 119,
  sym_named_expression = 120,
  sym_return_statement = 122,
  sym_delete_statement = 123,
  sym_raise_statement = 124,
  sym_pass_statement = 125,
  sym_break_statement = 126,
  sym_continue_statement = 127,
  sym_if_statement = 128,
  sym_elif_clause = 129,
  sym_else_clause = 130,
  sym_match_statement = 131,
  sym_case_clause = 132,
  sym_for_statement = 133,
  sym_while_statement = 134,
  sym_try_statement = 135,
  sym_except_clause = 136,
  sym_finally_clause = 137,
  sym_with_statement = 138,
  sym_with_clause = 139,
  sym_with_item = 140,
  sym_function_definition = 141,
  sym_parameters = 142,
  sym_lambda_parameters = 143,
  sym_list_splat = 144,
  sym_dictionary_splat = 145,
  sym_global_statement = 146,
  sym_nonlocal_statement = 147,
  sym_exec_statement = 148,
  sym_class_definition = 149,
  sym_parenthesized_list_splat = 150,
  sym_argument_list = 151,
  sym_decorated_definition = 152,
  sym_decorator = 153,
  sym_block = 154,
  sym_expression_list = 155,
  sym_dotted_name = 156,
  sym_tuple_pattern = 161,
  sym_list_pattern = 162,
  sym_default_parameter = 163,
  sym_typed_default_parameter = 164,
  sym_list_splat_pattern = 165,
  sym_dictionary_splat_pattern = 166,
  sym_as_pattern = 167,
  sym_not_operator = 171,
  sym_boolean_operator = 172,
  sym_binary_operator = 173,
  sym_unary_operator = 174,
  sym_comparison_operator = 175,
  sym_lambda = 176,
  sym_assignment = 178,
  sym_augmented_assignment = 179,
  sym_pattern_list = 180,
  sym_yield = 182,
  sym_attribute = 183,
  sym_subscript = 184,
  sym_slice = 185,
  sym_call = 186,
  sym_typed_parameter = 187,
  sym_type = 188,
  sym_keyword_argument = 189,
  sym_list = 190,
  sym_set = 191,
  sym_tuple = 192,
  sym_dictionary = 193,
  sym_pair = 194,
  sym_list_comprehension = 195,
  sym_dictionary_comprehension = 196,
  sym_set_comprehension = 197,
  sym_generator_expression = 198,
  sym_parenthesized_expression = 200,
  sym_for_in_clause = 202,
  sym_if_clause = 203,
  sym_conditional_expression = 204,
  sym_concatenated_string = 205,
  sym_string = 206,
  sym_interpolation = 207,
  sym_format_specifier = 209,
  sym_format_expression = 210,
  sym_await = 211,
  sym_positional_separator = 212,
  sym_keyword_separator = 213,
  sym_case_pattern = 242,
};
enum class field {
  fld_alias = 1,
  fld_alternative = 2,
  fld_argument = 3,
  fld_arguments = 4,
  fld_attribute = 5,
  fld_body = 6,
  fld_cause = 7,
  fld_code = 8,
  fld_condition = 9,
  fld_consequence = 10,
  fld_definition = 11,
  fld_function = 12,
  fld_guard = 13,
  fld_key = 14,
  fld_left = 15,
  fld_module_name = 16,
  fld_name = 17,
  fld_object = 18,
  fld_operator = 19,
  fld_operators = 20,
  fld_parameters = 21,
  fld_pattern = 22,
  fld_return_type = 23,
  fld_right = 24,
  fld_subject = 25,
  fld_subscript = 26,
  fld_superclasses = 27,
  fld_type = 28,
  fld_value = 29,
};
}  // namespace stanly
