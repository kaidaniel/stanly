cmake_minimum_required(VERSION 3.20)
set(binary_dir ${CMAKE_SOURCE_DIR}/build)
set(build_types Release Debug)
set(presets clang gcc)

function(main)
    parse_args_and_setup_or_fatal_error()
    foreach(preset ${presets})
        foreach(build_typ ${build_types})
            execute_workflow(${build_typ} ${preset})
        endforeach()
    endforeach()
    make_dependency_graph_png()
    run_clang_tidy_and_clang_format_on_all_source_files()
endfunction()

function(execute_workflow build_typ preset)
    set(clang_tidy clang-tidy --quiet)
    set(ENV{KSAR_BUILD_DIR} ${build_typ}) # used in CMakePresets.json:configurePresets:base
    set(ENV{CMAKE_BUILD_TYPE} $ENV{KSAR_BUILD_DIR})
    if(NOT EXISTS ${binary_dir}/${preset}/$ENV{KSAR_BUILD_DIR})
        introduce(build/${preset}/${build_typ}:configure)
        execute_cmd(${CMAKE_COMMAND} --preset ${preset})
    endif()
    introduce(build/${preset}/${build_typ}:build)
    execute_cmd(${CMAKE_COMMAND} --build --preset ${preset})
    unset(ENV{KSAR_BUILD_DIR})
    unset(ENV{CMAKE_BUILD_TYPE})
endfunction()

function(execute_cmd)
    execute_process(COMMAND ${ARGN} ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE COMMAND_ERROR_IS_FATAL ANY)
endfunction()

function(introduce msg)
    string(TIMESTAMP timestamp %H:%M:%S)
    macro(set_show)
        set(show :::[${msg}]--------------${padding}${timestamp})
    endmacro()
    set_show()
    string(LENGTH ${show} len)
    math(EXPR n 80-${len})
    string(REPEAT "-" ${n} padding)
    set_show()
    message("\n${show}")
endfunction()

function(make_dependency_graph_png)
    if(NOT EXISTS ${dependency_graph}.png)
        set(dependency_graph ${binary_dir}/dependency_graph)
        introduce(dependency_graph.png)
        execute_cmd(${CMAKE_COMMAND} -S ${CMAKE_SOURCE_DIR} -B $${binary_dir}/clang/Release/ --graphviz=${dependency_graph}.dot)
        execute_cmd(dot -Tpng ${dependency_graph}.dot -o ${dependency_graph}.png)
        file(GLOB graph_files ${dependency_graph}.dot.*)
        foreach(graph_file ${graph_files})
            file(REMOVE ${graph_file})
        endforeach()
    endif()
endfunction()

function(run_clang_tidy_and_clang_format_on_all_source_files)
    file(GLOB source_files src/*.cpp src/include/*.h)
    introduce(clang-tidy)
    execute_cmd(clang-tidy -p ${binary_dir}/clang/Release/ ${source_files})
    introduce(clang-format)
    execute_cmd(clang-format --verbose -i ${source_files})
endfunction()

function(parse_args_and_setup_or_fatal_error)
    set(help "usage: 'cmake -P test_repo.cmake [--help-script][--remove]'")
    set(first_arg ${CMAKE_ARGV3})
    if(first_arg STREQUAL --help-script)
        message(FATAL_ERROR ${help})
    endif()
    set(remove ${first_arg})
    set(_remove_vals --remove -r)
    if(CMAKE_ARGC GREATER 4 OR (CMAKE_ARGC EQUAL 4 AND NOT remove IN_LIST _remove_vals))
        message(FATAL_ERROR "unrecognized arguments. ${help} ${remove}")
    endif()
    if(NOT (EXISTS ${CMAKE_SOURCE_DIR}/CMakeLists.txt AND EXISTS ${CMAKE_SOURCE_DIR}/CMakePresets.json))
        message(FATAL_ERROR "only run from the project root")
    endif()
    if(remove)
        file(REMOVE_RECURSE ${binary_dir})
    endif()
endfunction()

string(TIMESTAMP start_time %s)
main()
string(TIMESTAMP stop_time %s)
math(EXPR elapsed ${stop_time}-${start_time})
math(EXPR minutes ${elapsed}/60)
math(EXPR seconds ${elapsed}%60)
introduce(Done)
message("Success after ${minutes} minutes, ${seconds} seconds")